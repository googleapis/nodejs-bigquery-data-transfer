// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './data_transfer_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The Google BigQuery Data Transfer Service API enables BigQuery users to
 *  configure the transfer of their data from other Google Products into
 *  BigQuery. This service contains methods that are end user exposed. It backs
 *  up the frontend.
 * @class
 * @memberof v1
 */
export class DataTransferServiceClient {
  private _descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  dataTransferServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DataTransferServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof DataTransferServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof DataTransferServiceClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectDataSourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/dataSources/{data_source}'
      ),
      projectLocationDataSourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataSources/{data_source}'
      ),
      projectLocationTransferConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/transferConfigs/{transfer_config}'
      ),
      projectLocationTransferConfigRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/transferConfigs/{transfer_config}/runs/{run}'
      ),
      projectTransferConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/transferConfigs/{transfer_config}'
      ),
      projectTransferConfigRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/transferConfigs/{transfer_config}/runs/{run}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listDataSources: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dataSources'
      ),
      listTransferConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferConfigs'
      ),
      listTransferRuns: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferRuns'
      ),
      listTransferLogs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferMessages'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.datatransfer.v1.DataTransferService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.dataTransferServiceStub) {
      return this.dataTransferServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.datatransfer.v1.DataTransferService.
    this.dataTransferServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.datatransfer.v1.DataTransferService'
          )
        : // tslint:disable-next-line no-any
          (this._protos as any).google.cloud.bigquery.datatransfer.v1
            .DataTransferService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const dataTransferServiceStubMethods = [
      'getDataSource',
      'listDataSources',
      'createTransferConfig',
      'updateTransferConfig',
      'deleteTransferConfig',
      'getTransferConfig',
      'listTransferConfigs',
      'scheduleTransferRuns',
      'startManualTransferRuns',
      'getTransferRun',
      'deleteTransferRun',
      'listTransferRuns',
      'listTransferLogs',
      'checkValidCreds',
    ];

    for (const methodName of dataTransferServiceStubMethods) {
      const innerCallPromise = this.dataTransferServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        innerCallPromise,
        this._defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }

    return this.dataTransferServiceStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'bigquerydatatransfer.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'bigquerydatatransfer.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getDataSource(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getDataSource(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Retrieves a supported data source and returns its settings,
   * which can be used for UI rendering.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for example:
   *   `projects/{project_id}/dataSources/{data_source_id}` or
   *   `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getDataSource(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getDataSource(request, options, callback);
  }
  createTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new data transfer configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id where the transfer configuration should be created.
   *   Must be in the format projects/{project_id}/locations/{location_id} or
   *   projects/{project_id}. If specified location and location of the
   *   destination bigquery dataset do not match - the request will fail.
   * @param {google.cloud.bigquery.datatransfer.v1.TransferConfig} request.transferConfig
   *   Required. Data transfer configuration to create.
   * @param {string} request.authorizationCode
   *   Optional OAuth2 authorization code to use with this transfer configuration.
   *   This is required if new credentials are needed, as indicated by
   *   `CheckValidCreds`.
   *   In order to obtain authorization_code, please make a
   *   request to
   *   https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
   *
   *   * client_id should be OAuth client_id of BigQuery DTS API for the given
   *     data source returned by ListDataSources method.
   *   * data_source_scopes are the scopes returned by ListDataSources method.
   *   * redirect_uri is an optional parameter. If not specified, then
   *     authorization code is posted to the opener of authorization flow window.
   *     Otherwise it will be sent to the redirect uri. A special value of
   *     urn:ietf:wg:oauth:2.0:oob means that authorization code should be
   *     returned in the title bar of the browser, with the page text prompting
   *     the user to copy the code and paste it in the application.
   * @param {string} request.versionInfo
   *   Optional version info. If users want to find a very recent access token,
   *   that is, immediately after approving access, users have to set the
   *   version_info claim in the token request. To obtain the version_info, users
   *   must use the "none+gsession" response type. which be return a
   *   version_info back in the authorization response which be be put in a JWT
   *   claim in the token request.
   * @param {string} request.serviceAccountName
   *   Optional service account name. If this field is set, transfer config will
   *   be created with this service account credentials. It requires that
   *   requesting user calling this API has permissions to act as this service
   *   account.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.createTransferConfig(request, options, callback);
  }
  updateTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates a data transfer configuration.
   * All fields must be set, even if they are not updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.bigquery.datatransfer.v1.TransferConfig} request.transferConfig
   *   Required. Data transfer configuration to create.
   * @param {string} request.authorizationCode
   *   Optional OAuth2 authorization code to use with this transfer configuration.
   *   If it is provided, the transfer configuration will be associated with the
   *   authorizing user.
   *   In order to obtain authorization_code, please make a
   *   request to
   *   https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?client_id=<datatransferapiclientid>&scope=<data_source_scopes>&redirect_uri=<redirect_uri>
   *
   *   * client_id should be OAuth client_id of BigQuery DTS API for the given
   *     data source returned by ListDataSources method.
   *   * data_source_scopes are the scopes returned by ListDataSources method.
   *   * redirect_uri is an optional parameter. If not specified, then
   *     authorization code is posted to the opener of authorization flow window.
   *     Otherwise it will be sent to the redirect uri. A special value of
   *     urn:ietf:wg:oauth:2.0:oob means that authorization code should be
   *     returned in the title bar of the browser, with the page text prompting
   *     the user to copy the code and paste it in the application.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Required list of fields to be updated in this request.
   * @param {string} request.versionInfo
   *   Optional version info. If users want to find a very recent access token,
   *   that is, immediately after approving access, users have to set the
   *   version_info claim in the token request. To obtain the version_info, users
   *   must use the "none+gsession" response type. which be return a
   *   version_info back in the authorization response which be be put in a JWT
   *   claim in the token request.
   * @param {string} request.serviceAccountName
   *   Optional service account name. If this field is set and
   *   "service_account_name" is set in update_mask, transfer config will be
   *   updated to use this service account credentials. It requires that
   *   requesting user calling this API has permissions to act as this service
   *   account.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'transfer_config.name': request.transferConfig!.name || '',
    });
    this.initialize();
    return this._innerApiCalls.updateTransferConfig(request, options, callback);
  }
  deleteTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes a data transfer configuration,
   * including any associated transfer runs and logs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for example:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteTransferConfig(request, options, callback);
  }
  getTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns information about a data transfer config.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for example:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getTransferConfig(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getTransferConfig(request, options, callback);
  }
  scheduleTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  scheduleTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates transfer runs for a time range [start_time, end_time].
   * For each date - or whatever granularity the data source supports - in the
   * range, one transfer run is created.
   * Note that runs are created per UTC time in the time range.
   * DEPRECATED: use StartManualTransferRuns instead.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer configuration name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {google.protobuf.Timestamp} request.startTime
   *   Required. Start time of the range of transfer runs. For example,
   *   `"2017-05-25T00:00:00+00:00"`.
   * @param {google.protobuf.Timestamp} request.endTime
   *   Required. End time of the range of transfer runs. For example,
   *   `"2017-05-30T00:00:00+00:00"`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ScheduleTransferRunsResponse]{@link google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  scheduleTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.scheduleTransferRuns(request, options, callback);
  }
  startManualTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  startManualTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Start manual transfer runs to be executed now with schedule_time equal to
   * current time. The transfer runs can be created for a time range where the
   * run_time is between start_time (inclusive) and end_time (exclusive), or for
   * a specific run_time.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Transfer configuration name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange} request.requestedTimeRange
   *   Time range for the transfer runs that should be started.
   * @param {google.protobuf.Timestamp} request.requestedRunTime
   *   Specific run_time for a transfer run to be started. The
   *   requested_run_time must not be in the future.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StartManualTransferRunsResponse]{@link google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  startManualTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.startManualTransferRuns(
      request,
      options,
      callback
    );
  }
  getTransferRun(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTransferRun(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns information about the particular transfer run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for example:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getTransferRun(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getTransferRun(request, options, callback);
  }
  deleteTransferRun(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTransferRun(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes the specified transfer run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for example:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTransferRun(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteTransferRun(request, options, callback);
  }
  checkValidCreds(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  checkValidCreds(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns true if valid credentials exist for the given data source and
   * requesting user.
   * Some data sources doesn't support service account, so we need to talk to
   * them on behalf of the end user. This API just checks whether we have OAuth
   * token for the particular user, which is a pre-requisite before user can
   * create a transfer config.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The data source in the form:
   *   `projects/{project_id}/dataSources/{data_source_id}` or
   *   `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CheckValidCredsResponse]{@link google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  checkValidCreds(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
          | protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      | protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      (
        | protosTypes.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.checkValidCreds(request, options, callback);
  }

  listDataSources(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
    ]
  >;
  listDataSources(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
    >
  ): void;
  /**
   * Lists supported data sources and returns their settings,
   * which can be used for UI rendering.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources should be returned.
   *   Must be in the form: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListDataSourcesRequest` list results. For multiple-page
   *   results, `ListDataSourcesResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListDataSourcesRequest]{@link google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListDataSourcesResponse]{@link google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listDataSources(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource[],
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.IDataSource[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listDataSources(request, options, callback);
  }

  /**
   * Equivalent to {@link listDataSources}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listDataSources} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources should be returned.
   *   Must be in the form: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListDataSourcesRequest` list results. For multiple-page
   *   results, `ListDataSourcesResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource} on 'data' event.
   */
  listDataSourcesStream(
    request?: protosTypes.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listDataSources.createStream(
      this._innerApiCalls.listDataSources as gax.GaxCall,
      request,
      callSettings
    );
  }
  listTransferConfigs(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
    ]
  >;
  listTransferConfigs(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
    >
  ): void;
  /**
   * Returns information about all data transfers in the project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources
   *   should be returned: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string[]} request.dataSourceIds
   *   When specified, only configurations of requested data sources are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransfersRequest` list results. For multiple-page
   *   results, `ListTransfersResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTransferConfigsRequest]{@link google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTransferConfigsResponse]{@link google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTransferConfigs(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listTransferConfigs(request, options, callback);
  }

  /**
   * Equivalent to {@link listTransferConfigs}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTransferConfigs} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources
   *   should be returned: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string[]} request.dataSourceIds
   *   When specified, only configurations of requested data sources are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransfersRequest` list results. For multiple-page
   *   results, `ListTransfersResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig} on 'data' event.
   */
  listTransferConfigsStream(
    request?: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listTransferConfigs.createStream(
      this._innerApiCalls.listTransferConfigs as gax.GaxCall,
      request,
      callSettings
    );
  }
  listTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
    ]
  >;
  listTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
    >
  ): void;
  /**
   * Returns information about running and completed jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of transfer configuration for which transfer runs should be retrieved.
   *   Format of transfer configuration resource name is:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {number[]} request.states
   *   When specified, only transfer runs with requested states are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferRunsRequest` list results. For multiple-page
   *   results, `ListTransferRunsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt} request.runAttempt
   *   Indicates how run attempts are to be pulled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTransferRunsRequest]{@link google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTransferRunsResponse]{@link google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTransferRuns(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listTransferRuns(request, options, callback);
  }

  /**
   * Equivalent to {@link listTransferRuns}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTransferRuns} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of transfer configuration for which transfer runs should be retrieved.
   *   Format of transfer configuration resource name is:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {number[]} request.states
   *   When specified, only transfer runs with requested states are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferRunsRequest` list results. For multiple-page
   *   results, `ListTransferRunsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt} request.runAttempt
   *   Indicates how run attempts are to be pulled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun} on 'data' event.
   */
  listTransferRunsStream(
    request?: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listTransferRuns.createStream(
      this._innerApiCalls.listTransferRuns as gax.GaxCall,
      request,
      callSettings
    );
  }
  listTransferLogs(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
    ]
  >;
  listTransferLogs(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
    >
  ): void;
  /**
   * Returns user facing log messages for the data transfer run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer run name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferLogsRequest` list results. For multiple-page
   *   results, `ListTransferLogsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {number[]} request.messageTypes
   *   Message types to return. If not populated - INFO, WARNING and ERROR
   *   messages are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferMessage]{@link google.cloud.bigquery.datatransfer.v1.TransferMessage}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [TransferMessage]{@link google.cloud.bigquery.datatransfer.v1.TransferMessage} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTransferLogsRequest]{@link google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTransferLogsResponse]{@link google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTransferLogs(
    request: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
          protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
      protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listTransferLogs(request, options, callback);
  }

  /**
   * Equivalent to {@link listTransferLogs}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTransferLogs} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer run name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferLogsRequest` list results. For multiple-page
   *   results, `ListTransferLogsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {number[]} request.messageTypes
   *   Message types to return. If not populated - INFO, WARNING and ERROR
   *   messages are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferMessage]{@link google.cloud.bigquery.datatransfer.v1.TransferMessage} on 'data' event.
   */
  listTransferLogsStream(
    request?: protosTypes.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listTransferLogs.createStream(
      this._innerApiCalls.listTransferLogs as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this._pathTemplates.projectPathTemplate.render({
      project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this._pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectDataSource resource name string.
   *
   * @param {string} project
   * @param {string} data_source
   * @returns {string} Resource name string.
   */
  projectDataSourcePath(project: string, dataSource: string) {
    return this._pathTemplates.projectDataSourcePathTemplate.render({
      project,
      data_source: dataSource,
    });
  }

  /**
   * Parse the project from ProjectDataSource resource.
   *
   * @param {string} projectDataSourceName
   *   A fully-qualified path representing project_data_source resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectDataSourceName(projectDataSourceName: string) {
    return this._pathTemplates.projectDataSourcePathTemplate.match(
      projectDataSourceName
    ).project;
  }

  /**
   * Parse the data_source from ProjectDataSource resource.
   *
   * @param {string} projectDataSourceName
   *   A fully-qualified path representing project_data_source resource.
   * @returns {string} A string representing the data_source.
   */
  matchDataSourceFromProjectDataSourceName(projectDataSourceName: string) {
    return this._pathTemplates.projectDataSourcePathTemplate.match(
      projectDataSourceName
    ).data_source;
  }

  /**
   * Return a fully-qualified projectLocationDataSource resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_source
   * @returns {string} Resource name string.
   */
  projectLocationDataSourcePath(
    project: string,
    location: string,
    dataSource: string
  ) {
    return this._pathTemplates.projectLocationDataSourcePathTemplate.render({
      project,
      location,
      data_source: dataSource,
    });
  }

  /**
   * Parse the project from ProjectLocationDataSource resource.
   *
   * @param {string} projectLocationDataSourceName
   *   A fully-qualified path representing project_location_data_source resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataSourceName(
    projectLocationDataSourceName: string
  ) {
    return this._pathTemplates.projectLocationDataSourcePathTemplate.match(
      projectLocationDataSourceName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataSource resource.
   *
   * @param {string} projectLocationDataSourceName
   *   A fully-qualified path representing project_location_data_source resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataSourceName(
    projectLocationDataSourceName: string
  ) {
    return this._pathTemplates.projectLocationDataSourcePathTemplate.match(
      projectLocationDataSourceName
    ).location;
  }

  /**
   * Parse the data_source from ProjectLocationDataSource resource.
   *
   * @param {string} projectLocationDataSourceName
   *   A fully-qualified path representing project_location_data_source resource.
   * @returns {string} A string representing the data_source.
   */
  matchDataSourceFromProjectLocationDataSourceName(
    projectLocationDataSourceName: string
  ) {
    return this._pathTemplates.projectLocationDataSourcePathTemplate.match(
      projectLocationDataSourceName
    ).data_source;
  }

  /**
   * Return a fully-qualified projectLocationTransferConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} transfer_config
   * @returns {string} Resource name string.
   */
  projectLocationTransferConfigPath(
    project: string,
    location: string,
    transferConfig: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigPathTemplate.render(
      {
        project,
        location,
        transfer_config: transferConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationTransferConfig resource.
   *
   * @param {string} projectLocationTransferConfigName
   *   A fully-qualified path representing project_location_transfer_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationTransferConfigName(
    projectLocationTransferConfigName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigPathTemplate.match(
      projectLocationTransferConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationTransferConfig resource.
   *
   * @param {string} projectLocationTransferConfigName
   *   A fully-qualified path representing project_location_transfer_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationTransferConfigName(
    projectLocationTransferConfigName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigPathTemplate.match(
      projectLocationTransferConfigName
    ).location;
  }

  /**
   * Parse the transfer_config from ProjectLocationTransferConfig resource.
   *
   * @param {string} projectLocationTransferConfigName
   *   A fully-qualified path representing project_location_transfer_config resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectLocationTransferConfigName(
    projectLocationTransferConfigName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigPathTemplate.match(
      projectLocationTransferConfigName
    ).transfer_config;
  }

  /**
   * Return a fully-qualified projectLocationTransferConfigRun resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} transfer_config
   * @param {string} run
   * @returns {string} Resource name string.
   */
  projectLocationTransferConfigRunPath(
    project: string,
    location: string,
    transferConfig: string,
    run: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigRunPathTemplate.render(
      {
        project,
        location,
        transfer_config: transferConfig,
        run,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).location;
  }

  /**
   * Parse the transfer_config from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).transfer_config;
  }

  /**
   * Parse the run from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).run;
  }

  /**
   * Return a fully-qualified projectTransferConfig resource name string.
   *
   * @param {string} project
   * @param {string} transfer_config
   * @returns {string} Resource name string.
   */
  projectTransferConfigPath(project: string, transferConfig: string) {
    return this._pathTemplates.projectTransferConfigPathTemplate.render({
      project,
      transfer_config: transferConfig,
    });
  }

  /**
   * Parse the project from ProjectTransferConfig resource.
   *
   * @param {string} projectTransferConfigName
   *   A fully-qualified path representing project_transfer_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTransferConfigName(projectTransferConfigName: string) {
    return this._pathTemplates.projectTransferConfigPathTemplate.match(
      projectTransferConfigName
    ).project;
  }

  /**
   * Parse the transfer_config from ProjectTransferConfig resource.
   *
   * @param {string} projectTransferConfigName
   *   A fully-qualified path representing project_transfer_config resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectTransferConfigName(
    projectTransferConfigName: string
  ) {
    return this._pathTemplates.projectTransferConfigPathTemplate.match(
      projectTransferConfigName
    ).transfer_config;
  }

  /**
   * Return a fully-qualified projectTransferConfigRun resource name string.
   *
   * @param {string} project
   * @param {string} transfer_config
   * @param {string} run
   * @returns {string} Resource name string.
   */
  projectTransferConfigRunPath(
    project: string,
    transferConfig: string,
    run: string
  ) {
    return this._pathTemplates.projectTransferConfigRunPathTemplate.render({
      project,
      transfer_config: transferConfig,
      run,
    });
  }

  /**
   * Parse the project from ProjectTransferConfigRun resource.
   *
   * @param {string} projectTransferConfigRunName
   *   A fully-qualified path representing project_transfer_config_run resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTransferConfigRunName(
    projectTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectTransferConfigRunPathTemplate.match(
      projectTransferConfigRunName
    ).project;
  }

  /**
   * Parse the transfer_config from ProjectTransferConfigRun resource.
   *
   * @param {string} projectTransferConfigRunName
   *   A fully-qualified path representing project_transfer_config_run resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectTransferConfigRunName(
    projectTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectTransferConfigRunPathTemplate.match(
      projectTransferConfigRunName
    ).transfer_config;
  }

  /**
   * Parse the run from ProjectTransferConfigRun resource.
   *
   * @param {string} projectTransferConfigRunName
   *   A fully-qualified path representing project_transfer_config_run resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromProjectTransferConfigRunName(
    projectTransferConfigRunName: string
  ) {
    return this._pathTemplates.projectTransferConfigRunPathTemplate.match(
      projectTransferConfigRunName
    ).run;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.dataTransferServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
