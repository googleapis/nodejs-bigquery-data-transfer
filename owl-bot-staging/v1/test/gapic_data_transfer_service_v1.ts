// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as datatransferserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.DataTransferServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = datatransferserviceModule.v1.DataTransferServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = datatransferserviceModule.v1.DataTransferServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = datatransferserviceModule.v1.DataTransferServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new datatransferserviceModule.v1.DataTransferServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new datatransferserviceModule.v1.DataTransferServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new datatransferserviceModule.v1.DataTransferServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.dataTransferServiceStub, undefined);
        await client.initialize();
        assert(client.dataTransferServiceStub);
    });

    it('has close method', () => {
        const client = new datatransferserviceModule.v1.DataTransferServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new datatransferserviceModule.v1.DataTransferServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new datatransferserviceModule.v1.DataTransferServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getDataSource', () => {
        it('invokes getDataSource without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource());
            client.innerApiCalls.getDataSource = stubSimpleCall(expectedResponse);
            const [response] = await client.getDataSource(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDataSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getDataSource without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource());
            client.innerApiCalls.getDataSource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDataSource(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.IDataSource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDataSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getDataSource with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getDataSource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDataSource(request), expectedError);
            assert((client.innerApiCalls.getDataSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createTransferConfig', () => {
        it('invokes createTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig());
            client.innerApiCalls.createTransferConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.createTransferConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig());
            client.innerApiCalls.createTransferConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTransferConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTransferConfig with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTransferConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTransferConfig(request), expectedError);
            assert((client.innerApiCalls.createTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateTransferConfig', () => {
        it('invokes updateTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest());
            request.transferConfig = {};
            request.transferConfig.name = '';
            const expectedHeaderRequestParams = "transfer_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig());
            client.innerApiCalls.updateTransferConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.updateTransferConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest());
            request.transferConfig = {};
            request.transferConfig.name = '';
            const expectedHeaderRequestParams = "transfer_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig());
            client.innerApiCalls.updateTransferConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTransferConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateTransferConfig with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest());
            request.transferConfig = {};
            request.transferConfig.name = '';
            const expectedHeaderRequestParams = "transfer_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTransferConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateTransferConfig(request), expectedError);
            assert((client.innerApiCalls.updateTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteTransferConfig', () => {
        it('invokes deleteTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTransferConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteTransferConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTransferConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTransferConfig(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteTransferConfig with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTransferConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteTransferConfig(request), expectedError);
            assert((client.innerApiCalls.deleteTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTransferConfig', () => {
        it('invokes getTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig());
            client.innerApiCalls.getTransferConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getTransferConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig());
            client.innerApiCalls.getTransferConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTransferConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTransferConfig with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTransferConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTransferConfig(request), expectedError);
            assert((client.innerApiCalls.getTransferConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('scheduleTransferRuns', () => {
        it('invokes scheduleTransferRuns without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse());
            client.innerApiCalls.scheduleTransferRuns = stubSimpleCall(expectedResponse);
            const [response] = await client.scheduleTransferRuns(request);
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.scheduleTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes scheduleTransferRuns without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse());
            client.innerApiCalls.scheduleTransferRuns = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.scheduleTransferRuns(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.scheduleTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes scheduleTransferRuns with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.scheduleTransferRuns = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.scheduleTransferRuns(request), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.scheduleTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('startManualTransferRuns', () => {
        it('invokes startManualTransferRuns without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse());
            client.innerApiCalls.startManualTransferRuns = stubSimpleCall(expectedResponse);
            const [response] = await client.startManualTransferRuns(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startManualTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startManualTransferRuns without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse());
            client.innerApiCalls.startManualTransferRuns = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startManualTransferRuns(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startManualTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startManualTransferRuns with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startManualTransferRuns = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startManualTransferRuns(request), expectedError);
            assert((client.innerApiCalls.startManualTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTransferRun', () => {
        it('invokes getTransferRun without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun());
            client.innerApiCalls.getTransferRun = stubSimpleCall(expectedResponse);
            const [response] = await client.getTransferRun(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTransferRun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTransferRun without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun());
            client.innerApiCalls.getTransferRun = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTransferRun(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferRun|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTransferRun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTransferRun with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTransferRun = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTransferRun(request), expectedError);
            assert((client.innerApiCalls.getTransferRun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteTransferRun', () => {
        it('invokes deleteTransferRun without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTransferRun = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteTransferRun(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTransferRun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteTransferRun without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTransferRun = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTransferRun(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTransferRun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteTransferRun with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTransferRun = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteTransferRun(request), expectedError);
            assert((client.innerApiCalls.deleteTransferRun as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('checkValidCreds', () => {
        it('invokes checkValidCreds without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse());
            client.innerApiCalls.checkValidCreds = stubSimpleCall(expectedResponse);
            const [response] = await client.checkValidCreds(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.checkValidCreds as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkValidCreds without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse());
            client.innerApiCalls.checkValidCreds = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.checkValidCreds(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.checkValidCreds as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes checkValidCreds with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.checkValidCreds = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkValidCreds(request), expectedError);
            assert((client.innerApiCalls.checkValidCreds as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listDataSources', () => {
        it('invokes listDataSources without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
            ];
            client.innerApiCalls.listDataSources = stubSimpleCall(expectedResponse);
            const [response] = await client.listDataSources(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDataSources as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDataSources without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
            ];
            client.innerApiCalls.listDataSources = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDataSources(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.IDataSource[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDataSources as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listDataSources with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listDataSources = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDataSources(request), expectedError);
            assert((client.innerApiCalls.listDataSources as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDataSourcesStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
            ];
            client.descriptors.page.listDataSources.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDataSourcesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.DataSource[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.DataSource) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDataSources.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDataSources, request));
            assert.strictEqual(
                (client.descriptors.page.listDataSources.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listDataSourcesStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listDataSources.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDataSourcesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.DataSource[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.DataSource) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDataSources.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDataSources, request));
            assert.strictEqual(
                (client.descriptors.page.listDataSources.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listDataSources without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.DataSource()),
            ];
            client.descriptors.page.listDataSources.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.datatransfer.v1.IDataSource[] = [];
            const iterable = client.listDataSourcesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDataSources.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listDataSources.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listDataSources with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listDataSources.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDataSourcesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.IDataSource[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDataSources.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listDataSources.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTransferConfigs', () => {
        it('invokes listTransferConfigs without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
            ];
            client.innerApiCalls.listTransferConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listTransferConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferConfigs without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
            ];
            client.innerApiCalls.listTransferConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTransferConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTransferConfigs with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTransferConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTransferConfigs(request), expectedError);
            assert((client.innerApiCalls.listTransferConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferConfigsStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
            ];
            client.descriptors.page.listTransferConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTransferConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.TransferConfig[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.TransferConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTransferConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTransferConfigsStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTransferConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTransferConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.TransferConfig[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.TransferConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTransferConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferConfigs without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferConfig()),
            ];
            client.descriptors.page.listTransferConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig[] = [];
            const iterable = client.listTransferConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferConfigs with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTransferConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTransferConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTransferRuns', () => {
        it('invokes listTransferRuns without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
            ];
            client.innerApiCalls.listTransferRuns = stubSimpleCall(expectedResponse);
            const [response] = await client.listTransferRuns(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferRuns without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
            ];
            client.innerApiCalls.listTransferRuns = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTransferRuns(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferRun[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTransferRuns with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTransferRuns = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTransferRuns(request), expectedError);
            assert((client.innerApiCalls.listTransferRuns as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferRunsStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
            ];
            client.descriptors.page.listTransferRuns.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTransferRunsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.TransferRun[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.TransferRun) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTransferRuns.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferRuns, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferRuns.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTransferRunsStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTransferRuns.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTransferRunsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.TransferRun[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.TransferRun) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTransferRuns.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferRuns, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferRuns.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferRuns without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferRun()),
            ];
            client.descriptors.page.listTransferRuns.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.datatransfer.v1.ITransferRun[] = [];
            const iterable = client.listTransferRunsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferRuns.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferRuns.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferRuns with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTransferRuns.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTransferRunsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.ITransferRun[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferRuns.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferRuns.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTransferLogs', () => {
        it('invokes listTransferLogs without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
            ];
            client.innerApiCalls.listTransferLogs = stubSimpleCall(expectedResponse);
            const [response] = await client.listTransferLogs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferLogs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferLogs without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
            ];
            client.innerApiCalls.listTransferLogs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTransferLogs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferLogs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTransferLogs with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTransferLogs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTransferLogs(request), expectedError);
            assert((client.innerApiCalls.listTransferLogs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferLogsStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
            ];
            client.descriptors.page.listTransferLogs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTransferLogsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.TransferMessage[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.TransferMessage) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTransferLogs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferLogs, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferLogs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTransferLogsStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTransferLogs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTransferLogsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.TransferMessage[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.datatransfer.v1.TransferMessage) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTransferLogs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferLogs, request));
            assert.strictEqual(
                (client.descriptors.page.listTransferLogs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferLogs without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
              generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.TransferMessage()),
            ];
            client.descriptors.page.listTransferLogs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage[] = [];
            const iterable = client.listTransferLogsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferLogs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferLogs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTransferLogs with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTransferLogs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTransferLogsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferLogs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTransferLogs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectDataSource', () => {
            const fakePath = "/rendered/path/projectDataSource";
            const expectedParameters = {
                project: "projectValue",
                data_source: "dataSourceValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectDataSourcePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectDataSourcePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectDataSourcePath', () => {
                const result = client.projectDataSourcePath("projectValue", "dataSourceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectDataSourcePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectDataSourceName', () => {
                const result = client.matchProjectFromProjectDataSourceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectDataSourcePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataSourceFromProjectDataSourceName', () => {
                const result = client.matchDataSourceFromProjectDataSourceName(fakePath);
                assert.strictEqual(result, "dataSourceValue");
                assert((client.pathTemplates.projectDataSourcePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationDataSource', () => {
            const fakePath = "/rendered/path/projectLocationDataSource";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                data_source: "dataSourceValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationDataSourcePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationDataSourcePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationDataSourcePath', () => {
                const result = client.projectLocationDataSourcePath("projectValue", "locationValue", "dataSourceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationDataSourcePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationDataSourceName', () => {
                const result = client.matchProjectFromProjectLocationDataSourceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationDataSourcePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationDataSourceName', () => {
                const result = client.matchLocationFromProjectLocationDataSourceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationDataSourcePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataSourceFromProjectLocationDataSourceName', () => {
                const result = client.matchDataSourceFromProjectLocationDataSourceName(fakePath);
                assert.strictEqual(result, "dataSourceValue");
                assert((client.pathTemplates.projectLocationDataSourcePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationTransferConfig', () => {
            const fakePath = "/rendered/path/projectLocationTransferConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                transfer_config: "transferConfigValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationTransferConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationTransferConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationTransferConfigPath', () => {
                const result = client.projectLocationTransferConfigPath("projectValue", "locationValue", "transferConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationTransferConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationTransferConfigName', () => {
                const result = client.matchProjectFromProjectLocationTransferConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationTransferConfigName', () => {
                const result = client.matchLocationFromProjectLocationTransferConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransferConfigFromProjectLocationTransferConfigName', () => {
                const result = client.matchTransferConfigFromProjectLocationTransferConfigName(fakePath);
                assert.strictEqual(result, "transferConfigValue");
                assert((client.pathTemplates.projectLocationTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationTransferConfigRun', () => {
            const fakePath = "/rendered/path/projectLocationTransferConfigRun";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                transfer_config: "transferConfigValue",
                run: "runValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationTransferConfigRunPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationTransferConfigRunPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationTransferConfigRunPath', () => {
                const result = client.projectLocationTransferConfigRunPath("projectValue", "locationValue", "transferConfigValue", "runValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationTransferConfigRunPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationTransferConfigRunName', () => {
                const result = client.matchProjectFromProjectLocationTransferConfigRunName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationTransferConfigRunName', () => {
                const result = client.matchLocationFromProjectLocationTransferConfigRunName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransferConfigFromProjectLocationTransferConfigRunName', () => {
                const result = client.matchTransferConfigFromProjectLocationTransferConfigRunName(fakePath);
                assert.strictEqual(result, "transferConfigValue");
                assert((client.pathTemplates.projectLocationTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRunFromProjectLocationTransferConfigRunName', () => {
                const result = client.matchRunFromProjectLocationTransferConfigRunName(fakePath);
                assert.strictEqual(result, "runValue");
                assert((client.pathTemplates.projectLocationTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectTransferConfig', () => {
            const fakePath = "/rendered/path/projectTransferConfig";
            const expectedParameters = {
                project: "projectValue",
                transfer_config: "transferConfigValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectTransferConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectTransferConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectTransferConfigPath', () => {
                const result = client.projectTransferConfigPath("projectValue", "transferConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectTransferConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectTransferConfigName', () => {
                const result = client.matchProjectFromProjectTransferConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransferConfigFromProjectTransferConfigName', () => {
                const result = client.matchTransferConfigFromProjectTransferConfigName(fakePath);
                assert.strictEqual(result, "transferConfigValue");
                assert((client.pathTemplates.projectTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectTransferConfigRun', () => {
            const fakePath = "/rendered/path/projectTransferConfigRun";
            const expectedParameters = {
                project: "projectValue",
                transfer_config: "transferConfigValue",
                run: "runValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectTransferConfigRunPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectTransferConfigRunPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectTransferConfigRunPath', () => {
                const result = client.projectTransferConfigRunPath("projectValue", "transferConfigValue", "runValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectTransferConfigRunPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectTransferConfigRunName', () => {
                const result = client.matchProjectFromProjectTransferConfigRunName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransferConfigFromProjectTransferConfigRunName', () => {
                const result = client.matchTransferConfigFromProjectTransferConfigRunName(fakePath);
                assert.strictEqual(result, "transferConfigValue");
                assert((client.pathTemplates.projectTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRunFromProjectTransferConfigRunName', () => {
                const result = client.matchRunFromProjectTransferConfigRunName(fakePath);
                assert.strictEqual(result, "runValue");
                assert((client.pathTemplates.projectTransferConfigRunPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
